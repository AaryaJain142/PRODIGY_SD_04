# Function to check if it's safe to place a number in a given cell
def is_safe(board, row, col, num):
    # Check if the number is in the same row
    for i in range(9):
        if board[row][i] == num:
            return False
    
    # Check if the number is in the same column
    for i in range(9):
        if board[i][col] == num:
            return False

    # Check if the number is in the 3x3 subgrid
    start_row = (row // 3) * 3
    start_col = (col // 3) * 3
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False

    return True

# Function to solve the Sudoku using backtracking
def solve_sudoku(board):
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:  # If the cell is empty
                for num in range(1, 10):  # Try numbers 1-9
                    if is_safe(board, row, col, num):
                        board[row][col] = num  # Assign the number
                        
                        if solve_sudoku(board):  # Recursively solve
                            return True
                        
                        board[row][col] = 0  # Backtrack if no solution found
                return False
    return True  # Sudoku solved

# Function to print the Sudoku grid
def print_sudoku(board):
    for row in board:
        print(" ".join(str(cell) for cell in row))

# Input Sudoku grid (0 represents empty cells)
unsolved_sudoku = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Solve the Sudoku and print the solution
if solve_sudoku(unsolved_sudoku):
    print("Sudoku solved successfully:")
    print_sudoku(unsolved_sudoku)
else:
    print("No solution exists.")
